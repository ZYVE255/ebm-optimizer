CreateBaseline(star, planet, temporal=5000, spacial=32,orbit=2):

    Runs a high resoltuion version of the model.
    
    Args:
        star (ebm.Star): The star to runs the test on
        planet (ebm.Planet): The planet to run the test on
        temporal (int): The temporal resolution to run the model
        spacial (int): The spacial resolution to run the model
        orbit (int): The amount of orbits to run for the model
        
    Return:
        ndarray: Baseline time array
        ndarray: Baseline map array
        ndarray: Baseline lightcurve array



RunTests(star, planet, points, base, basetimes):

    Runs several test of a system and returns time 
    to compute and error as comapared to baseline for each test.
    
    Args:
        star (ebm.Star): The star to runs the tests on
        planet (ebm.Planet): The planet to run the tests on
        points (2darray (n by 2)): The array of points to be tested by the model, 
            each point must contain [temporal, spacial], n points are provided
        base (ndarray): Baseline lightcurve as generated by the CreateBaseline function
        basetime (ndarray): Baseline times as generated by CreateBaseline function
        
    Return:
        ndarray: Array of all tested lightcurves
        ndarray: (n by 4), n points of format [temporal, spacial, time_to_compute, error_in_ppm]



Optimize(star, planet, error, verbose=False):

    Optimizes spacial and temporal resolution for a given system
    
    Args:
        star (ebm.Star): The star to runs the tests on
        planet (ebm.Planet): The planet to run the tests on
        error (float): Amount of allowed error in ppm
        verbose (bool): If true will output progress as it computes
        
    Return:
        int: Optimized temporal resolution
        int: Optimized spacial resolution